function Rate(b,a){this.amount=ko.observable(b.displayRate);
this.dollars=ko.computed(function(){return this.amount().split(".")[0]
},this);
this.cents=ko.computed(function(){return this.amount().split(".")[1]
},this);
this.currency=ko.computed(function(){return getCurrency(a)
},this);
this.frequency=ko.computed(function(){return rateText()[b.displayRateUnitType]
},this);
this.total=ko.observable(b.rentalTotal)
}function TripEnhancementItem(b){var a=this;
a.code=ko.observable(b.equipmentContainer.equipment.equipmentCode);
a.name=ko.observable(b.equipmentContainer.equipment.equipmentTranslation.name);
a.description=ko.observable(b.equipmentContainer.equipment.equipmentTranslation.shortDescription);
a.countryCode=ko.observable(b.countryCode);
a.hideIncludedEquipment=ko.observable(b.equipmentContainer.equipmentRate.hideIncludedEquipment);
a.options=ko.computed(function(){var e=new Array();
for(var d=1;
d<=b.max;
d++){e[d-1]=d
}return e
});
var c="#";
if(b.equipmentContainer.equipment.equipmentTranslation.detailedDescriptionNodePath){c=detailPath()+"/country="+a.countryCode()+"/type=E/code="+a.code()+".html"
}a.detailsPath=ko.observable(c);
a.included=ko.observable(b.equipmentContainer.equipmentRate.included);
a.mandatory=ko.observable(b.equipmentContainer.equipmentRate.mandatory);
a.active=ko.observable(b.active);
if(isPtpCheckin!==undefined&&isPtpCheckin!=null&&isPtpCheckin==true){if(a.active()){a.selected=ko.observable(b.selected)
}else{a.selected=ko.observable(0)
}}else{a.selected=ko.observable(b.selected)
}a.rate=ko.observable(new Rate(b.equipmentContainer.equipmentRate,b.currency));
a.fullRate=ko.observable(b.equipmentContainer.equipmentRate.displayRate);
a.showButton=ko.computed(function(){return !(a.included()||a.mandatory())
});
a.click=function(){var f=a.active()?"remove":"add";
var e=a.code();
var h=$("#"+a.selectId());
var g=h.val();
var d="&action="+f+"&code="+e+"&quantity="+g;
new TripEnhancementUpdate(d,a.updateTripEnhancement,arguments)
};
a.updateTripEnhancement=function(d){var f=a.active()?false:true;
a.active(f);
var e=$("#skipAddOn");
e.hide()
};
a.selectId=ko.computed(function(){var d=a.code()+"quantitySelecter";
if(a.included()){d=d+"_I"
}if(a.mandatory()){d=d+"_M"
}return d
},a);
a.longDescriptionUrl=ko.observable(b.equipmentContainer.equipment.equipmentTranslation.detailedDescriptionNodePath==null?"":b.equipmentContainer.equipment.equipmentTranslation.detailedDescriptionNodePath.path);
a.longDescription=ko.observable("");
a.getLongDescription=function(){if(a.longDescription()===""){$.ajax({url:a.longDescriptionUrl()+".html",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(d){a.longDescription(d)
}})
}}
}var checkinTripEnhancement=function(b){this.tripEnhancementCheck=b.tripEnhancementDetailList?ko.observable(true):ko.observable(false);
this.enhancementList=ko.observableArray();
var a=ko.utils.arrayMap(b.tripEnhancementDetailList,function(c){return new TripEnhancementItem(c)
});
ko.utils.arrayPushAll(this.enhancementList,a);
if(b.showPopupNow&&getShowAddOnNotificationModal()==="true"){initModal("md","true",getAddonPopupModalUrl())
}this.hasIncludedChildSeat=ko.observable(b.hasIncludedChildSeat)
};
var checkinSummary=function(t){window.submitInProgress=false;
var c=t.locationHeavyContainerList[0];
var f=t.locationHeavyContainerList[1];
var h=t.summary;
this.isLacCountries=t.isLacCountries!="undefined"?t.isLacCountries:false;
this.prepaidVoucher=t.prepaidVoucher;
this.renterTotal=ko.observable(t.renterTotal);
this.alternateRenterTotal=ko.observable(t.alternateRenterTotal);
this.cancelReservationFlag=ko.observable(t.isCancelAllowed);
this.modifyReservationFlag=ko.observable(t.isModifyAllowed);
var j=(typeof t.vehicle!="undefined")?t.vehicle:false;
this.showVehicle=(j)?true:false;
this.driveAlliance=ko.observable(t.driveAlliance);
this.driveAllianceName=ko.observable(t.driveAllianceName);
this.displayDiscountApplied=(typeof t.displayDiscountApplied==="undefined")?false:t.displayDiscountApplied;
this.isPayNowAvailable=ko.observable(t.isPayNowAvailable);
this.prepaySelected=ko.observable(t.prepaySelected);
this.disableCheckInEdit=(t.prepaySelected&&t.isModifyAllowed)?true:false;
this.isAIDiscountApplied=ko.computed(function(){return(this.isPayNowAvailable&&this.displayDiscountApplied)
});
var n=(typeof t.displayTotalSavings==="undefined")?false:t.displayTotalSavings;
this.showSavings=ko.observable(n);
this.disableSecretRates=(typeof t.disableSecretRates==="undefined")?false:t.disableSecretRates;
var k=(typeof t.rateChargeTaxesFees!="undefined")?t.rateChargeTaxesFees:false;
if(k==false){this.showPriceBreakdown=false
}else{this.showPriceBreakdown=(typeof k.baseRate!="undefined")?true:false
}if(h.customerNumber!=null){this.showCustomer=true
}else{this.showCustomer=false
}this.customerDesc=typeof t.customer==="undefined"?"":t.customer.customerName;
this.customerTermsAndConditions=ko.computed(function(){if(typeof t.customer!="undefined"){if(typeof t.customer.dealCustomerDetail!="undefined"){return t.customer.dealCustomerDetail.customerTranslation.termsAndConditions
}else{return t.customer.partnerCustomerDetail.customerTranslation.termsAndConditions
}}return""
});
this.customerTermsAndConditionsExists=ko.computed(function(){if(customerTermsAndConditions()!=""&&customerTermsAndConditions()!=null){return true
}else{return false
}});
this.couponDesc=typeof t.coupon==="undefined"?"":t.coupon.description;
this.dealCouponTermsAndConditions=ko.computed(function(){if(typeof t.coupon!="undefined"){if(typeof t.dealCouponDetail!="undefined"&&typeof t.dealCouponDetail.customerTranslation!="undefined"){return t.dealCouponDetail.customerTranslation.termsAndConditions
}else{return""
}}return""
});
this.dealCouponTermsAndConditionsExists=ko.computed(function(){if(this.dealCouponTermsAndConditions()!=""&&this.dealCouponTermsAndConditions()!=null){return true
}else{return false
}},this);
this.contractTnCModalUrl=ko.computed(function(){var x=getContractTAndCUrl();
if(dealCouponTermsAndConditionsExists()&&customerTermsAndConditionsExists()){return x+"?coupon=true&contract=true"
}else{if(dealCouponTermsAndConditionsExists()){return x+"?coupon=true"
}else{if(customerTermsAndConditionsExists()){return x+"?contract=true"
}else{return x
}}}},this);
if(this.showVehicle){var v="";
if(j.imageSmallSideProfileNodePath!=null){v=doi.build({src:j.resourcePath.path,ext:j.imageSmallSideProfileNodePath.extension,lastModified:j.resourcePath.lastModified,size:320,resolution:"high",imageStyle:"imageSmallSideProfileNodePath"})
}this.vehicleImagePath=ko.observable(v);
this.vehicleName=ko.observable(j.vehicleTranslation.name);
this.vehicleSimilars=ko.observable(j.vehicleTranslation.similarVehicles);
this.twoOrFourDoorText=ko.observable(j.vehicleTranslation.twoOrFourDoorText);
this.vehicleDescription=ko.observable(j.vehicleTranslation.description);
this.hideOrSimilarText=ko.observable(j.hideOrSimilarText);
this.orSimilarText=ko.observable(j.vehicleTranslation.orSimilarText)
}this.reservationNumber=ko.observable(h.reservationNumber);
this.showDriverInfo=false;
this.showLoyaltyProgram=false;
this.showArrivingAirline=false;
if(h.primaryDriver!=null){this.showDriverInfo=true;
this.driverName=ko.computed(function(){return h.primaryDriver.firstName+" "+h.primaryDriver.lastName
},this);
this.email=ko.observable(h.primaryDriver.emailAddress);
if(h.primaryDriver.membershipProgram!=null){this.showLoyaltyProgram=true
}this.loyaltyProgram=ko.observable(h.primaryDriver.membershipProgram)
}if(h.airlineInfo!=null){this.showArrivingAirline=true;
this.arrivingAirline=ko.computed(function(){return h.airlineInfo.airlineCode+" "+h.airlineInfo.flightNumber
},this)
}else{this.arrivingAirline=null
}if(t.prepaySelected){this.prepaySelected=true
}else{this.prepaySelected=false
}this.priceBreakdownItems=ko.observableArray();
if(this.showPriceBreakdown){var k=t.rateChargeTaxesFees;
this.baseRateList=ko.observableArray(k.baseRateLineItemList);
$.each(baseRateList(),function(x,y){this.durationCount=ko.observable(y.chargeUnit);
this.code=ko.observable(y.rateUnit);
var z=getDurationTypeText(this.code());
this.chargeRate=ko.observable(y.chargeRate);
this.chargeDescription=ko.computed(function(){return this.durationCount()+" "+z+(disableSecretRates?" ":" @"+this.chargeRate())
},this);
this.displayCurrencySymbol=ko.observable(!disableSecretRates);
this.chargeAmount=ko.observable(disableSecretRates?getIncludedText():y.chargeAmount)
});
this.addOnList=ko.observableArray(k.addOnLineItemList);
this.showAddons=false;
if(this.addOnList!=null&&this.addOnList().length>0){this.showAddons=true
}$.each(addOnList(),function(A,z){var y=z.jcrLineItemDescription==null?z.lineItemDescription:z.jcrLineItemDescription;
this.description=ko.observable(y);
this.price=ko.observable(z.chargeAmount);
if(this.price()==0){this.price=getIncludedText()
}this.quantity=ko.observable(z.quantity);
this.displayPrice=ko.observable(z.displayRate);
this.code=ko.observable(z.rateUnit);
var x=getDurationTypeText(this.code());
this.rateUnitTypeCode=ko.observable(x);
var B=z.maxRate==null?"":z.maxRate;
this.tempMax=B!=0?B:"";
this.maxRate=ko.observable(z.maxRate)
});
this.coveragesList=ko.observableArray();
var o=k.coverageLineItemList;
for(var l=0;
l<o.length;
l++){var w=o[l].jcrLineItemDescription==null?o[l].lineItemDescription:o[l].jcrLineItemDescription;
var g=o[l].chargeAmount;
var u=getDurationTypeText(o[l].rateUnit);
if(g==0){g=getIncludedText()
}this.coveragesList.push({covDescription:w,covPrice:g,covDisplayPrice:o[l].displayRate,code:o[l].rateUnit,covRateUnitTypeCode:u})
}this.isSavingsInNegative=ko.computed(function(){return k.totalSavings<0?true:false
},this);
this.savings=ko.computed(function(){return k.totalSavings<0?Math.abs(k.totalSavings).toFixed(2):k.totalSavings
},this);
this.fees=ko.observableArray(k.fees);
this.feeItems=ko.observableArray();
var s;
s=k.fees;
for(var l=0;
l<s.length;
l++){if(t.isTourCustomer&&s[l].chargeCategory==="ADR"){if(s[l].chargeAmount>0){var r=(s[l].quantity>1)?getMultipleAdditionalDriverText():s[l].lineItemDescription;
s[l].lineItemDescription=s[l].quantity+" "+r
}}else{s[l].lineItemDescription=s[l].lineItemDescription
}this.feeItems.push({name:s[l].lineItemDescription,price:s[l].chargeAmount})
}this.mileages=ko.observableArray([]);
$.each(k.mileages,function(y,A){var B=getIncludedText();
var x="";
var z="";
if(A.chargeRate==0){y=(t.distanceUnit=="MI")?getUnlimitedMileageText():getUnlimitedKmsText()
}else{y=(t.distanceUnit=="MI")?(A.chargeUnit+getFreeMilesText()):(A.chargeUnit+getFreeKmsText());
if(t.distanceUnit=="MI"){x=A.chargeRate
}else{z=A.chargeRate
}}mileages.push({id:y,name:B,excessMile:x,excessKilometer:z})
});
this.inclusiveLineItems=ko.observableArray([]);
$.each(k.inclusiveLineItems,function(y,A){var x=ko.utils.arrayFirst(inclusiveLineItems(),function(B){if(A.equipmentLineItem||A.coverageLineItem){return false
}else{return A.lineItemDescription===B.id
}});
if(!x){if(t.isTourCustomer&&A.lineItem==="AD"){var z=(A.quantity>1)?getMultipleAdditionalDriverText():A.lineItemDescription;
A.lineItemDescription=A.quantity+" "+z
}else{A.lineItemDescription=A.lineItemDescription
}inclusiveLineItems.push({id:A.lineItemDescription,name:getIncludedText(),equipmentLineItem:A.equipmentLineItem,coverageLineItem:A.coverageLineItem})
}});
this.currencySymbol=ko.observable(k.currencySymbol);
this.alternateCurrencySymbol=ko.observable(k.alternateCurrencySymbol);
this.alternateEstimatedTotal=ko.observable(k.alternateEstimatedTotal);
this.alternateEstimatedTotalDriverCharges=ko.observable(k.alternateEstimatedTotalDriverCharges);
this.currencyConversionFlag=ko.observable(k.showCurrencyConversion);
this.totalPrice=ko.observable(k.totalPrice);
this.totalDriverCharges=ko.observable(k.totalDriverCharges);
this.previousTotalPrice=ko.observable(k.previousTotalPrice);
this.isXXOVoucherMOP=t.isXXOVoucherMOP;
this.estimatedTotal=ko.observable(k.totalPrice);
this.rentersTotal=ko.observable(k.renterTotal);
this.vouchersTotal=ko.observable(k.voucherTotal);
this.totalWithVoucher=ko.computed(function(){return parseFloat(this.totalPrice()-this.vouchersTotal()).toFixed(2)
});
this.isDisplayAlternateCurrency=ko.observable(k.showCurrencyConversion);
this.totalDriver=ko.computed(function(){return parseInt(this.totalDriverCharges())
});
this.total=ko.computed(function(){return parseInt(this.totalPrice())
});
this.previousTotal=ko.computed(function(){return parseInt(this.previousTotalPrice())
});
var q=(parseFloat(this.totalPrice())-parseInt(this.totalPrice())).toFixed(2);
this.totalDecimal=ko.observable(q.replace("0.",""));
var d=(parseFloat(this.totalDriverCharges())-parseInt(this.totalDriverCharges())).toFixed(2);
this.totalDriverDecimal=ko.observable(d.replace("0.",""));
var b=(parseFloat(this.previousTotalPrice())-parseInt(this.previousTotalPrice())).toFixed(2);
this.previousTotalDecimal=b.replace("0.","")
}var p=t.recentReservationChanges;
this.showRecentChanges=false;
if(null!=p){if(p.removedEquipmentList.length>0||p.addedEquipmentList.length>0||p.removedInsuranceList.length>0||p.addedInsuranceList.length>0||p.newCategoryCode!=null){this.showRecentChanges=true
}this.removedEquipmentList=ko.observableArray(p.removedEquipmentList);
this.addedEquipmentList=ko.observableArray(p.addedEquipmentList);
this.removedInsuranceList=ko.observableArray(p.removedInsuranceList);
this.addedInsuranceList=ko.observableArray(p.addedInsuranceList);
this.differenceInTotal=ko.observable(p.differenceInTotal);
this.showNegate=ko.observable(t.showNegate);
this.vehicleUpgrade=false;
if(p.newCategoryCode!=null){this.vehicleUpgrade=true;
this.upgradeVehicle=ko.observable(p.newCategoryCode)
}}this.symbol=ko.observable(k.currencySymbol);
if(h.pickUpLocationPeopleSoftId==h.dropOffLocationPeopleSoftId){this.singleLocationReservation=true;
this.singleLocationName=ko.observable(c.locationName);
this.singleLocationCity=ko.observable(c.address.city);
this.singleLocationStateProvinceCode=ko.observable(c.address.stateProvinceAbbreviation);
this.singleLocationPostalCode=ko.observable(c.address.postalCode);
this.singleLocationCountryCode=ko.observable(t.pickUpLocCountryName)
}else{this.singleLocationReservation=false;
this.pickUpLocationName=ko.observable(c.locationName);
this.pickUpLocationCity=ko.observable(c.address.city);
this.pickUpLocationStateProvinceCode=ko.observable(c.address.stateProvinceAbbreviation);
this.pickUpLocationPostalCode=ko.observable(c.address.postalCode);
this.pickUpLocationCountryCode=ko.observable(t.pickUpLocCountryName);
this.dropOffLocationName=ko.observable(f.locationName);
this.dropOffLocationCity=ko.observable(f.address.city);
this.dropOffLocationStateProvinceCode=ko.observable(f.address.stateProvinceAbbreviation);
this.dropOffLocationPostalCode=ko.observable(f.address.postalCode);
this.dropOffLocationCountryCode=ko.observable(t.dropOffLocCountryName)
}this.isPickUpAirportLocation=ko.observable(c.airportLocation);
this.isPickUptrainStationLocation=ko.observable(c.trainStationLocation);
this.isPickUpportOfCallLocation=ko.observable(c.portOfCallLocation);
this.isPickUpLocationIcon=ko.computed(function(){if(this.isPickUpAirportLocation||this.isPickUptrainStationLocation||this.isPickUpportOfCallLocation==true){return true
}else{return false
}});
this.isdropOffAirportLocation=ko.observable(f.airportLocation);
this.isdropOfftrainStationLocation=ko.observable(f.trainStationLocation);
this.isdropOffportOfCallLocation=ko.observable(f.portOfCallLocation);
this.isDropOffLocationIcon=ko.computed(function(){if(this.isdropOffAirportLocation||this.isdropOfftrainStationLocation||this.isdropOffportOfCallLocation==true){return true
}else{return false
}});
this.pickUpDateTime=ko.observable(t.pickUpDateTimeStr);
this.dropOffDateTime=ko.observable(t.dropOffDateTimeStr);
this.pickUpDate=ko.observable(t.ptpCheckinPickUpDate);
this.pickUpTime=ko.observable(t.ptpCheckinPickUpTime);
this.dropOffDate=ko.observable(t.ptpCheckinDropOffDate);
this.dropOffTime=ko.observable(t.ptpCheckinDropOffTime);
this.pickLocationName=ko.observable(c.locationName);
this.pickAirportCode=ko.observable(c.airportCode!=null?"("+c.airportCode+")":"");
this.pickLocationCity=ko.observable(c.address.city);
this.pickLocationStateProvinceCode=ko.observable(c.address.stateProvinceAbbreviation);
this.pickLocationPostalCode=ko.observable(c.address.postalCode);
this.pickLocationCountryCode=ko.observable(c.address.countryCode);
this.pickUpPhoneHref=ko.observable("tel:"+h.pickUpTelehoneNumber);
this.dropLocationName=ko.observable(f.locationName);
this.dropAirportCode=ko.observable(f.airportCode!=null?"("+f.airportCode+")":"");
this.dropLocationCity=ko.observable(f.address.city);
this.dropLocationStateProvinceCode=ko.observable(f.address.stateProvinceAbbreviation);
this.dropLocationPostalCode=ko.observable(f.address.postalCode);
this.dropLocationCountryCode=ko.observable(f.address.countryCode);
this.dropLocationPhoneHref=ko.observable("tel:"+h.dropOffTelephoneNumber);
this.pickUpAddressLines=ko.observableArray();
var a;
a=c.address.addressLines;
for(var l=0;
l<a.length;
l++){pickUpAddressLines.push({line:a[l]})
}this.dropoffAddressLines=ko.observableArray();
var m;
m=f.address.addressLines;
for(var l=0;
l<m.length;
l++){dropoffAddressLines.push({line:m[l]})
}this.pickUpStandardOperatingHours=ko.observableArray();
var i;
i=t.pickUpOperatingHoursList;
for(var l=0;
l<i.length;
l++){pickUpStandardOperatingHours.push({day:i[l].day,hour:i[l].hour,closed:i[l].closed,open24Hours:i[l].open24Hours})
}this.dropOffStandardOperatingHours=ko.observableArray();
var e;
e=t.dropOffOperatingHoursList;
for(var l=0;
l<e.length;
l++){dropOffStandardOperatingHours.push({day:e[l].day,hour:e[l].hour,closed:e[l].closed,open24Hours:e[l].open24Hours})
}this.pickLocationPhone=ko.observable(h.pickUpTelehoneNumber);
this.dropLocationPhone=ko.observable(h.dropOffTelephoneNumber)
};
var checkinSummaryRadioClick=function(j){window.submitInProgress=false;
if(typeof j.recentReservationChanges!="undefined"){this.differenceInTotal((typeof j.recentReservationChanges.differenceInTotal!="undefined")?j.recentReservationChanges.differenceInTotal:false)
}var b=(typeof j.rateChargeTaxesFees!="undefined")?j.rateChargeTaxesFees:false;
this.totalPrice(b.totalPrice);
var f=(parseFloat(this.totalPrice())-parseInt(this.totalPrice())).toFixed(2);
this.totalDecimal(f.replace("0.",""));
this.alternateEstimatedTotalDriverCharges((b.alternateEstimatedTotalDriverCharges!="undefined")?b.alternateEstimatedTotalDriverCharges:false);
this.alternateEstimatedTotal((b.alternateEstimatedTotal!="undefined")?b.alternateEstimatedTotal:false);
this.alternateRenterTotal((typeof j.alternateRenterTotal!="undefined")?j.alternateRenterTotal:false);
this.renterTotal((typeof j.renterTotal!="undefined")?j.renterTotal:false);
this.totalDriverCharges(b.totalDriverCharges);
var e=(parseFloat(this.totalDriverCharges())-parseInt(this.totalDriverCharges())).toFixed(2);
this.totalDriverDecimal(e.replace("0.",""));
this.fees.removeAll();
this.fees(b.fees);
this.feeItems.removeAll();
var i;
i=b.fees;
for(var g=0;
g<i.length;
g++){this.feeItems.push({name:i[g].lineItemDescription,price:i[g].chargeAmount})
}this.mileages.removeAll();
$.each(b.mileages,function(l,n){var o=getIncludedText();
var k="";
var m="";
if(n.chargeRate==0){l=(j.distanceUnit=="MI")?getUnlimitedMileageText():getUnlimitedKmsText()
}else{l=(j.distanceUnit=="MI")?(n.chargeUnit+getFreeMilesText()):(n.chargeUnit+getFreeKmsText());
if(j.distanceUnit=="MI"){k=n.chargeRate
}else{m=n.chargeRate
}}mileages.push({id:l,name:o,excessMile:k,excessKilometer:m})
});
this.coveragesList.removeAll();
var d=b.coverageLineItemList;
for(var g=0;
g<d.length;
g++){var c=d[g].jcrLineItemDescription==null?d[g].lineItemDescription:d[g].jcrLineItemDescription;
var a=d[g].chargeAmount;
var h=getDurationTypeText(d[g].rateUnit);
if(a==0){a=getIncludedText()
}this.coveragesList.push({covDescription:c,covPrice:a,covDisplayPrice:d[g].displayRate,code:d[g].rateUnit,covRateUnitTypeCode:h})
}};
function handleLocationAddress(){var a=$(this).text();
a=a.replace(/\s+/g," ");
var b="http://maps.apple.com/?q=";
if($(window).width()<760){window.location=b+a
}else{window.open(b+a,"_blank")
}return false
}$(document).ready(function(){if($(window).width()>=760){$(".checkinSummary .twistNew .dl").addClass("open")
}else{$(".checkinSummary .twistNew .dl").removeClass("open")
}$(window).resize(function(){if($(window).width()>=760){$(".checkinSummary .twistNew .dl").addClass("open")
}else{$(".checkinSummary .twistNew .dl").removeClass("open")
}});
$("p.address.alamoLocationModalAddress a").live("click",handleLocationAddress)
});
if(typeof(alamo)==="undefined"){alamo={}
}if(typeof(alamo.oci)==="undefined"){alamo.oci={}
}alamo.oci.CoverageListViewModel=function(b){this.coverageList=ko.observableArray();
var a=ko.utils.arrayMap(b.coverageDetailList,function(c){return new alamo.oci.CoverageViewModel(c)
});
ko.utils.arrayPushAll(this.coverageList,a)
};
alamo.oci.CoverageViewModel=function(b){var a=this;
a.code=ko.observable(b.insuranceContainer.insurance.insuranceCode);
a.name=ko.observable(b.insuranceContainer.insurance.insuranceTranslation.name);
a.description=ko.observable(b.insuranceContainer.insurance.insuranceTranslation.shortDescription);
a.countryCode=ko.observable(b.countryCode);
var c="#";
if(b.insuranceContainer.insurance.insuranceTranslation.detailedDescriptionNodePath){c=detailPath()+"/country="+a.countryCode()+"/type=I/code="+a.code()+".html"
}a.detailsPath=ko.observable(c);
a.included=ko.observable(b.insuranceContainer.insuranceRate.included);
a.mandatory=ko.observable(b.insuranceContainer.insuranceRate.mandatory);
a.active=ko.observable(b.active);
a.checked=ko.observable((b.active?"true":"false"));
a.coverageStatus=ko.observable(b.coverageStatus);
a.rate=ko.observable(new Rate(b.insuranceContainer.insuranceRate,b.currency));
a.fullRate=ko.observable(b.insuranceContainer.insuranceRate.displayRate);
a.selected=ko.observable(b.selected||"1");
a.options=ko.observable(false);
a.selectedItem=ko.observable(b.coverageStatus);
a.showButton=ko.computed(function(){return !(a.included()||a.mandatory())
});
a.click=function(h,f){if(a.active()!==($(f.target).prop("value")=="true"?true:false)||$(f.target).parent().attr("class").toUpperCase()!=a.selectedItem()){a.selectedItem($(f.target).parent().attr("class").toUpperCase());
var g=a.active()?"remove":"add";
var e=a.code();
var d="?action="+g+"&coverageCode="+e+"&transactionType="+transactionType()+"&onlineCheckin=true&coverageSelected="+$(f.target).prop("value");
new ExtraCoverageViewModel(d,arguments);
a.active(!a.active());
return true
}};
a.longDescriptionUrl=ko.observable(b.insuranceContainer.insurance.insuranceTranslation.detailedDescriptionNodePath==null?"":b.insuranceContainer.insurance.insuranceTranslation.detailedDescriptionNodePath.path);
a.longDescription=ko.observable("");
a.getLongDescription=function(){if(a.longDescription()===""){$.ajax({url:a.longDescriptionUrl()+".html",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(d){a.longDescription(d)
}})
}}
};
var checkinDetailContainer=function(a){var b=this;
this.onlineCheckinDriverInformationModel=ko.observable(a.onlineCheckinDriverInformationModel)
};
var detailContainer=function(a){this.isPrePayRes=ko.observable(a.isPrepaidRes);
this.isBypassAvailable=ko.observable(a.isBypassAvailable);
this.reservationNumber=ko.observable(a.reservationNumber);
this.isEquipmentsAvailable=ko.observable(a.isEquipmentsAvailable);
if(a.addPaymentInformation){callPanGui(a.addPaymentInformation)
}else{checkinDetailContainer(a)
}this.isBypassAvailable=ko.observable(a.isBypassAvailable)
};
var isPtpCheckin;
var driverInformation=function(c){var g=this;
this.onlineCheckinDriverInformationModel=ko.observable(c.onlineCheckinDriverInformationModel);
var f=c.renterInfo?c.renterInfo:false;
var e=c.dob?c.dob:false;
var d=c.birthDateMon;
var b=c.birthDateYr;
var a=c.isCheckedInORBypassed;
this.loggedInAIMember=ko.observable(c.isLoggedInAI?c.isLoggedInAI:false);
this.emailAddress=ko.observable(c.emailAddress?c.emailAddress:"");
this.isAIDOBExists=ko.observable(c.isAIDOBExists);
if(f){this.licenseNumber=ko.observable((typeof f.maskedLastFourDigits==="undefined"||f.maskedLastFourDigits==null)?"":f.maskedLastFourDigits);
this.contactNumberExt=ko.observable((typeof c.extension==="undefined"||c.extension==null)?"":c.extension);
this.licenseExpirationDate=ko.observable((typeof f.driverLicense==="undefined"||f.driverLicense==null)?"":f.driverLicense.compoundExpirationDate);
if(typeof f.driverLicense!=="undefined"&&f.driverLicense!=null){licenseExpirationDate=f.driverLicense.compoundExpirationDate
}this.licenseIssuingDate=ko.observable((typeof f.driverLicense==="undefined"||f.driverLicense==null)?"":f.driverLicense.compoundIssueDate);
if(typeof f.driverLicense!=="undefined"&&f.driverLicense!=null){licenseIssuingDate=f.driverLicense.compoundIssueDate
}this.licenseCountry=ko.observable((typeof f.driverLicense==="undefined"||f.driverLicense==null||f.driverLicense.countryCode==null)?c.countryOfResidence:f.driverLicense.countryCode);
this.licenseState=ko.observable((typeof f.driverLicense==="undefined"||f.driverLicense==null)?"":f.driverLicense.stateProvinceCode);
this.addressLine1=ko.observable(((typeof f.homeMailtoAddress==="undefined")||(typeof f.homeMailtoAddress.addressLines[0]==="undefined"))?"":f.homeMailtoAddress.addressLines[0]);
this.addressLine2=ko.observable(((typeof f.homeMailtoAddress==="undefined")||(typeof f.homeMailtoAddress.addressLines[1]==="undefined"))?"":f.homeMailtoAddress.addressLines[1]);
this.addressCity=ko.observable((typeof f.homeMailtoAddress==="undefined"||f.homeMailtoAddress==null)?"":f.homeMailtoAddress.city);
this.addressZipCode=ko.observable((typeof f.homeMailtoAddress==="undefined"||f.homeMailtoAddress==null)?"":f.homeMailtoAddress.postalCode);
if(typeof f.phoneMap!=="undefined"&&f.phoneMap!=null){this.contactNumber=ko.observable((typeof f.phoneMap[1]==="undefined"&&f.phoneMap[1]==null)?"":f.phoneMap[1])
}else{this.contactNumber=ko.observable("")
}this.addressCountry=ko.observable((typeof f.homeMailtoAddress==="undefined"||f.homeMailtoAddress==null||f.homeMailtoAddress.countryCode==null)?c.countryOfResidence:f.homeMailtoAddress.countryCode);
this.addressState=ko.observable((typeof f.homeMailtoAddress==="undefined"||f.homeMailtoAddress==null)?"":f.homeMailtoAddress.stateProvinceCode);
if(typeof e!=="undefined"&&e!=null){this.dateOfBirth=e;
this.birthDateDay=e.day;
this.birthDateMonth=d;
this.birthDateYear=c.birthDateYr
}}else{this.licenseNumber=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().licenseMaskedLastFourDigits==null)?"":this.onlineCheckinDriverInformationModel().licenseMaskedLastFourDigits);
this.licenseExpirationDate=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().licenseExpirationDate==null)?"":this.onlineCheckinDriverInformationModel().licenseExpirationDate);
if(typeof this.onlineCheckinDriverInformationModel!=="undefined"&&this.onlineCheckinDriverInformationModel!=null&&this.onlineCheckinDriverInformationModel()!=null){licenseExpirationDate=this.onlineCheckinDriverInformationModel().licenseExpirationDate
}this.licenseIssuingDate=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().licenseIssuingDate==null)?"":this.onlineCheckinDriverInformationModel().licenseIssuingDate);
if(typeof this.onlineCheckinDriverInformationModel!=="undefined"&&this.onlineCheckinDriverInformationModel!=null&&this.onlineCheckinDriverInformationModel()!=null){licenseIssuingDate=this.onlineCheckinDriverInformationModel().licenseIssuingDate
}this.dateOfBirth=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().dateOfBirth==null)?"":this.onlineCheckinDriverInformationModel().dateOfBirth);
if(typeof this.onlineCheckinDriverInformationModel!=="undefined"&&this.onlineCheckinDriverInformationModel!=null&&this.onlineCheckinDriverInformationModel()!=null){dateOfBirth=this.onlineCheckinDriverInformationModel().dateOfBirth
}this.licenseCountry=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().licenseCountry==null)?c.countryOfResidence:this.onlineCheckinDriverInformationModel().licenseCountry);
this.licenseState=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().licenseState==null)?"":this.onlineCheckinDriverInformationModel().licenseState);
this.addressLine1=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().addressLine1==null)?"":this.onlineCheckinDriverInformationModel().addressLine1);
this.addressLine2=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null)?"":this.onlineCheckinDriverInformationModel().addressLine2);
this.addressCity=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().addressLine2==null)?"":this.onlineCheckinDriverInformationModel().addressCity);
this.addressZipCode=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().addressZipCode==null)?"":this.onlineCheckinDriverInformationModel().addressZipCode);
this.contactNumber=ko.observable(this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().contactNumber==null?"":this.onlineCheckinDriverInformationModel().contactNumber);
this.contactNumberExt=ko.observable(this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().contactNumberExt==null?"":this.onlineCheckinDriverInformationModel().contactNumberExt);
this.addressCountry=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().addressCountry==null)?c.countryOfResidence:this.onlineCheckinDriverInformationModel().addressCountry);
this.addressState=ko.observable((this.onlineCheckinDriverInformationModel==null||this.onlineCheckinDriverInformationModel()==null||this.onlineCheckinDriverInformationModel().addressState==null)?"":this.onlineCheckinDriverInformationModel().addressState)
}this.phoneNumber1=ko.observable(this.contactNumber().substr(0,3));
this.phoneNumber2=ko.observable(this.contactNumber().substr(3,3));
this.phoneNumber3=ko.observable(this.contactNumber().substr(6));
this.phoneNumber=ko.computed(function(){return this.phoneNumber1()+this.phoneNumber2()+this.phoneNumber3()
},this);
this.selectedCountry=ko.observable();
this.selectedState=ko.observable();
this.selectedLicenseCountry=ko.observable();
this.selectedLicenseState=ko.observable();
this.showAddressState=ko.observable(false);
this.showLicenseState=ko.observable(false);
this.isCheckedInORBypassed=a;
this.isShowPostalCodeRequired=ko.observable(false);
this.enableLicenseExpirationDate=ko.observable(false);
this.enableLicenseIssueDate=ko.observable(false);
this.nonRequiredLabel=ko.observable((this.enableLicenseExpirationDate()==true&&this.enableLicenseIssueDate()==true)?true:false);
this.changeAdditionalDriverLicenseStateListAndDriverLicenseIssueAndExpirationDate=function(){displayLicenseIssueAndExpirationDate();
changeissuingCountryList()
};
this.changeList=function(){var h=prepareForSuffix(g.driverInformationStateUrl)+"/country="+g.selectedCountry()+".json";
$.ajax({url:h,dataType:"json",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(j){var i=j.statesProvinces;
if(typeof j.showPostalCode!=="undefined"&&j.showPostalCode){g.isShowPostalCodeRequired(true)
}else{g.isShowPostalCodeRequired(false)
}if(typeof i!=="undefined"&&i.length>2){g.showAddressState(true);
driverInformation.driverAddressStateArray(i)
}else{g.showAddressState(false)
}g.selectedState(g.addressState())
},error:function(){top.append('<p role="alert" class="error">'+g.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
this.changeissuingCountryList=function(){var h=prepareForSuffix(g.driverInformationStateUrl)+"/country="+g.selectedLicenseCountry()+".json";
$.ajax({url:h,dataType:"json",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(j){var i=j.statesProvinces;
if(typeof i!=="undefined"&&i.length>2){g.showLicenseState(true);
driverInformation.driverLicenseStateArray(i)
}else{g.showLicenseState(false)
}g.selectedLicenseState(g.licenseState())
},error:function(){top.append('<p role="alert" class="error">'+g.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
this.displayLicenseIssueAndExpirationDate=function(){var h=prepareForSuffix(g.driverInformationLicenseIssueAndExpirationDateUrl)+"?countryCode="+g.selectedLicenseCountry();
$.ajax({url:h,dataType:"json",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(i){g.enableLicenseExpirationDate(i.enableLicenseExpirationDate);
g.enableLicenseIssueDate(i.enableLicenseIssueDate);
g.nonRequiredLabel((g.enableLicenseExpirationDate()==true&&g.enableLicenseIssueDate()==true)?true:false)
},error:function(){top.append('<p role="alert" class="error">'+g.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
$.ajax({url:driverInformationCountryUrl,dataType:"json",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(h){driverInformation.driverCountryArray=h.countries;
if(g.addressCountry()){g.selectedCountry(g.addressCountry())
}g.selectedLicenseCountry(g.licenseCountry());
displayLicenseIssueAndExpirationDate();
if(typeof g.addressCountry()!=="undefined"){g.changeList()
}if(typeof g.licenseCountry()!=="undefined"){g.changeissuingCountryList()
}},error:function(){top.append('<p class="error">'+g.labels.generic_global_error+"</p>");
top.css("position","relative")
}});
$("#addressSameAsPrimaryDriver, .addressSameAsPrimaryDriver").live("click",function(){var h=g;
if($(this).is(":checked")){window.selectedAdditionalDriverAddressCountry(h.selectedCountry());
window.changeAdditionalDriverAddressStateList(null,null,h.selectedState());
$("div.addAdditionalDriver input[name='adAddressLine1']").val(h.addressLine1());
$("div.addAdditionalDriver input[name='adAddressLine2']").val(h.addressLine2());
$("div.addAdditionalDriver input[name='adAddressCity']").val(h.addressCity());
if(showAddressState()==true){if(isPtpCheckin!==undefined&&isPtpCheckin!=null&&isPtpCheckin==true){$("div.addAdditionalDriver input[name='adContactNumber']").val(h.phoneNumber()==null||h.phoneNumber()==="undefined"?h.phoneNumber():h.phoneNumber().replace(/-/g,""))
}else{$("div.addAdditionalDriver input[name='adContactNumber']").val(h.phoneNumber())
}}else{if(isPtpCheckin!==undefined&&isPtpCheckin!=null&&isPtpCheckin==true){$("div.addAdditionalDriver input[name='adContactNumber']").val(h.contactNumber()==null||h.phoneNumber()==="undefined"?h.contactNumber():h.contactNumber().replace(/-/g,""))
}else{$("div.addAdditionalDriver input[name='adContactNumber']").val(h.contactNumber())
}}window.adAddressZipCode(h.addressZipCode())
}else{$("div.addAdditionalDriver select[name='adAddressCountry']").removeAttr("value");
window.selectedAdditionalDriverAddressCountry("");
window.changeAdditionalDriverAddressStateList();
$("div.addAdditionalDriver input[name='adAddressLine1']").removeAttr("value");
$("div.addAdditionalDriver input[name='adAddressLine2']").removeAttr("value");
$("div.addAdditionalDriver input[name='adAddressCity']").removeAttr("value");
$("div.addAdditionalDriver input[name='adContactNumber']").removeAttr("value");
$("div.addAdditionalDriver input[name='adAddressZipCode']").removeAttr("value");
$("div.addAdditionalDriver select[name='adAddressState']").removeAttr("value")
}})
};
driverInformation.driverCountryArray=[{countryCode:"",name:""}];
driverInformation.driverLicenseStateArray=ko.observable([{name:"",stateProvinceCode:""}]);
driverInformation.driverAddressStateArray=ko.observable([{name:"",stateProvinceCode:""}]);
if(typeof(alamo)==="undefined"){alamo={}
}if(typeof(alamo.oci)==="undefined"){alamo.oci={}
}alamo.oci.MultipleDriverListViewModel=function(a){this.driverList=ko.observableArray();
this.additionalDriverFeeAmount=ko.observable(a.additionalDriverFeeAmount);
this.additionalDriverFeeCurrency=ko.observable(a.additionalDriverFeeCurrency);
this.additionalDriverFeeFrequency=ko.observable(a.additionalDriverFeeFrequency);
this.showAddAdditionalDriverLink=a.showAddAdditionalDriverLink;
this.additionalDriverFee=ko.computed(function(){var c="";
if((this.additionalDriverFeeCurrency!=null)&&(this.additionalDriverFeeAmount!=null)&&(this.additionalDriverFeeFrequency!=null)){c+=getCurrency(this.additionalDriverFeeCurrency());
c+=this.additionalDriverFeeAmount();
c+=" / "+this.rateText()[this.additionalDriverFeeFrequency()]
}return c
});
$(a.renters).each(function(c,d){d.indexCounter=c+2
});
var b=ko.utils.arrayMap(a.renters,function(c){return new alamo.oci.DriverViewModel(c)
});
ko.utils.arrayPushAll(this.driverList,b)
};
alamo.oci.DriverViewModel=function(b){var a=this;
a.indexCounter=ko.observable(b.indexCounter);
a.name=ko.computed(function(){return(b.firstName+" "+b.lastName)
});
if(b.homeMailtoAddress){a.addressLines=ko.computed(function(){var c="";
var d;
for(d=0;
d<b.homeMailtoAddress.addressLines.length;
d++){c+=b.homeMailtoAddress.addressLines[d];
if(d<b.homeMailtoAddress.addressLines.length){c+="<br/>"
}}var f=b.homeMailtoAddress.stateProvinceAbbreviation||"";
var e=b.homeMailtoAddress.postalCode||"";
if(b.homeMailtoAddress.city!=""&&f!=""&&e!=""){c+=b.homeMailtoAddress.city+","+f+" "+e
}else{c+=b.homeMailtoAddress.city+""+f+" "+e
}return c
})
}if(b.driverLicense){a.licenseCountryCode=ko.observable(b.driverLicense.countryCode);
a.licenseExpirationDate=ko.observable(b.driverLicense.expirationDateStr);
a.licenseIssuingDate=ko.observable(b.driverLicense.issueDateStr);
a.licenseExpirationDateValue=b.driverLicense.expirationDateStr!=null?true:false;
a.licenseIssuingDateValue=b.driverLicense.issueDateStr!=null?true:false;
a.licenseNumber=ko.computed(function(){if(b.driverLicense.lastFourDigits!=""){return"*******"+b.driverLicense.lastFourDigits
}else{return b.driverLicense.lastFourDigits
}})
}a.click=function(){var c="?individualId="+b.individualId;
new AdditionalDriverDeleteViewModel(c);
return true
};
a.dateOfBirth=ko.computed(function(){return b.dateOfBirthStr
});
a.getEditAdditionalDriverHref=ko.computed(function(){var d=getEditAdditionalDriverPath();
var c=d+"?individualId="+b.individualId+"&parentContextPath="+path;
return c
});
a.additionalDriverChargeFee=ko.computed(function(){var c="";
if((this.additionalDriverFeeCurrency!=null)&&(this.additionalDriverFeeFrequency!=null)){c+=getCurrency(this.additionalDriverFeeCurrency());
c+=b.additionalDriverChargeFee;
c+=" / "+this.rateText()[this.additionalDriverFeeFrequency()]
}return c
})
};
if(typeof(alamo)==="undefined"){alamo={}
}if(typeof(alamo.oci)==="undefined"){alamo.oci={}
}alamo.oci.PaymentInfoViewModel=function(a){this.usingDebitCard=ko.observable(a.returnTransportationInfo.usingDebitCard);
this.mayUseDebitCard=ko.observable(a.mayUseDebitCard);
this.travelMethod=ko.observableArray(a.travelMethod);
this.returnTicketType=ko.observable(a.returnTransportationInfo.returnTicketType);
this.returnTicketDate=ko.observable(a.returnTransportationInfo.returnTicketDate);
this.returnTicketNumber=ko.observable(a.returnTransportationInfo.returnTicketNumber)
};
var reservationLookUp=function(b){var a=this;
a.reservationLookUpModel=null==b.reservationLookUpModel?null:ko.observable(b.reservationLookUpModel);
a.resStatus=ko.observable(b.ReservationStatus);
if(a.resStatus()=="pending"){var c=getPendingModalURL()+".modal.html";
initModal("sm","true",c)
}};
function upgradeVehicle(t){var m=this;
m.disableSecretRates=ko.observable(t.disableSecretRates);
m.vehicleUpgradeAvailable=ko.observable(t.upgradeAvailable);
m.countryCode=ko.observable(t.countryCode);
m.upgradeAvailable=ko.computed(function(){return(m.vehicleUpgradeAvailable()&&!m.disableSecretRates())
},m);
var d=t.upgradeSelected;
m.upgradeSelected=ko.observable(d);
m.upgradeValue=ko.computed(function(){return m.upgradeSelected()?"reselect":"upgrade"
},m);
m.showCurrentVehicle=ko.computed(function(){return(m.upgradeSelected()||!m.upgradeAvailable())
},m);
m.showTable=ko.computed(function(){return(m.upgradeSelected()||m.upgradeAvailable())
},m);
m.showComponent=ko.observable(true);
var p=(t.upgradeVehicleList==null)?null:t.upgradeVehicleList[0];
if(p!=null){m.currentVehicleName=ko.observable(p.vehicle.vehicleTranslation.name);
m.termsAndConditions=ko.computed(function(){if(m.upgradeAvailable()){return p.upgradeVehicle.termsAndConditionsRequired
}else{if(m.upgradeSelected()){return p.previousVehicle.termsAndConditionsRequired
}}return false
},m);
m.sipp=ko.computed(function(){if(m.upgradeAvailable()){return p.upgradeVehicle.vehicleCategoryCode
}else{if(m.upgradeSelected()){return p.previousVehicle.vehicleCategoryCode
}}return null
},m);
m.currentVehicleSimilarVehicles=ko.observable(p.vehicle.vehicleTranslation.similarVehicles);
m.hideOrSimilarText=ko.observable(p.vehicle.hideOrSimilarText);
m.orSimilarText=ko.observable(p.vehicle.vehicleTranslation.orSimilarText);
m.currentVehicleDoorText=ko.observable(p.vehicle.vehicleTranslation.twoOrFourDoorText);
m.currentVehicleLuggageText=ko.observable(p.vehicle.capacityLuggage);
m.currentVehiclePeopleText=ko.observable(p.vehicle.capacityPeople);
m.currentVehicleCategoryCode=ko.observable(p.vehicle.vehicleCategoryCode);
m.currentVehicleFeatures=ko.observableArray();
var k=t.selectedVehicleFeatures.selectedVehicleFeatureMap;
for(var q in k){var o=k[q];
m.currentVehicleFeatures.push({name:o.name})
}var j="";
if(p.vehicle.imageSmallSideProfileNodePath!=null){j=doi.build({src:p.vehicle.resourcePath.path,ext:p.vehicle.imageSmallSideProfileNodePath.extension,lastModified:p.vehicle.resourcePath.lastModified,size:320,resolution:"high",imageStyle:"imageSmallSideProfileNodePath"})
}m.currentVehicleImagePath=ko.observable(j);
m.currentVehicleTotalPrice=t.prepaySelected===true?ko.observable(p.vehicleRate.prepaySeatPrice):ko.observable(p.vehicleRate.totalSeatPrice);
m.days=ko.computed(function(){var x=p.vehicleRate.chargeDays;
return x.split(".")[0]
},m);
m.currency=ko.computed(function(){return getCurrency(p.vehicleRate.reservationCurrencyCode)
},m);
var w=p.upgradeVehicle==null?"":p.upgradeVehicle.vehicleTranslation.name;
m.upgradeVehicleName=ko.observable(w);
var f=p.upgradeVehicle==null?"":p.upgradeVehicle.vehicleTranslation.similarVehicles;
m.upgradeVehicleSimilarVehicles=ko.observable(f);
if(p.upgradeVehicle!=null){m.upgradeHideOrSimilarText=ko.observable(p.upgradeVehicle.hideOrSimilarText);
m.upgradeOrSimilarText=ko.observable(p.upgradeVehicle.vehicleTranslation.orSimilarText)
}if(p.upgradeVehicle!=null&&p.upgradeVehicle.imageSmallSideProfileNodePath!=null){var v=doi.build({src:p.upgradeVehicle.resourcePath.path,ext:p.upgradeVehicle.imageSmallSideProfileNodePath.extension,lastModified:p.upgradeVehicle.imageSmallSideProfileNodePath.lastModified,size:320,resolution:"high",imageStyle:"imageSmallSideProfileNodePath"})
}m.upgradeVehicleImagePath=ko.observable(v);
var n=p.upgradeVehicleRate==null?"":p.upgradeVehicleRate;
if(n!=""){var r=t.prepaySelected===true?n.prepaySeatPrice:n.totalSeatPrice;
m.upgradeVehicleTotalPrice=ko.observable(r)
}else{m.upgradeVehicleTotalPrice=ko.observable("")
}m.priceDifference=ko.observable(p.priceDifference);
var g=p.upgradeVehicle==null?"":p.upgradeVehicle.vehicleCategoryCode;
m.vehicleCategoryCode=ko.observable(g);
var s=p.previousVehicle==null?"":p.previousVehicle.vehicleTranslation.name;
m.previousVehicleName=ko.observable(s);
var a=p.previousVehicle==null?"":p.previousVehicle.vehicleCategoryCode;
m.previousVehicleCategoryCode=ko.observable(a);
var i=p.previousVehicle==null?"":p.previousVehicle.vehicleTranslation.similarVehicles;
m.previousVehicleSimilarVehicles=ko.observable(i);
var u=p.previousVehicle==null?"":p.previousVehicle.vehicleTranslation.twoOrFourDoorText;
m.previousVehicleDoorText=ko.observable(u);
var l=p.previousVehicle==null?"":t.previousVehicleFeatures;
m.previousVehicleFeatures=ko.observableArray();
var c=l.selectedVehicleFeatureMap;
for(var q in c){var o=c[q];
m.previousVehicleFeatures.push({name:o.name})
}if(p.previousVehicle!=null&&p.previousVehicle.imageSmallSideProfileNodePath!=null){var b=doi.build({src:p.previousVehicle.resourcePath.path,ext:p.previousVehicle.imageSmallSideProfileNodePath.extension,lastModified:p.previousVehicle.imageSmallSideProfileNodePath.lastModified,size:320,resolution:"high",imageStyle:"imageSmallSideProfileNodePath"})
}m.previousVehicleImagePath=ko.observable(b);
var h=t.previousVehicleRate==null?"":t.previousVehicleRate;
if(h!=""){var e=h.totalSeatPrice;
m.previousVehicleTotalPrice=ko.observable(e)
}else{m.previousVehicleTotalPrice=ko.observable("")
}}else{m.showComponent=ko.observable(false)
}this.upgradeSubmit=function(x){x.submitForm()
}
}var AirlineInfo=function(d){var f=this;
var e=d.reviewAndSubmit;
var a=e.rateChargeTaxesFees;
this.counter=0;
this.frequentTravelProgNumber=(typeof d.frequentTravelNumber==="undefined")?"":d.frequentTravelNumber;
this.isVirginAtlantic=ko.observable(d.isVirginAtlantic);
this.frequentTravelProgName=(typeof d.frequentTravelProgramName==="undefined")?"":d.frequentTravelProgramName;
this.reviewAndSubmitModel=null===d.reviewAndSubmitModel?null:ko.observable(d.reviewAndSubmitModel);
this.onlineCheckinAirlineInformationModel=null===d.onlineCheckinAirlineInformationModel?null:ko.observable(d.onlineCheckinAirlineInformationModel);
this.isOnRequestReservation=ko.observable(e.displayFlags.isOnRequestReservation);
this.isPayNowAvailable=ko.observable(e.displayFlags.isPayNowAvailable);
this.isPayNowReservation=ko.observable(e.displayFlags.isPayNowReservation);
this.isOnRequestReservation=ko.observable(e.displayFlags.isOnRequestReservation);
this.isLoggedInAlamoInsider=ko.observable(e.displayFlags.isLoggedInAlamoInsider);
this.isDisplayFrequentTravelerProgram=ko.observable(e.displayFlags.isDisplayFrequentTravelerProgram);
this.isDisplayAirlineInfo=ko.observable(e.displayFlags.isDisplayAirlineInfo);
var b=e.displayFlags.isSelectedFrequentTravelerProgram;
this.isSelectedFrequentTravelerProgram=ko.observable(e.displayFlags.isSelectedFrequentTravelerProgram);
this.isNotSelectedFrequentTravelerProgram=b===true?ko.observable(false):ko.observable(true);
this.selectedFrequentTravelerProgramCode=ko.observable(e.selectedFrequentTravelerProgramCode);
this.isDisplaySavings=ko.observable(e.displayFlags.isDisplaySavings);
this.airlineSelected=null===d.onlineCheckinAirlineInformationModel?null:ko.observable(d.onlineCheckinAirlineInformationModel.airline);
this.showAirlineFrequentTravelSection=ko.observable((null==d.onlineCheckinAirlineInformationModel)?false:d.onlineCheckinAirlineInformationModel.airlineInformation);
this.showAirlineSection=ko.observable((null!=d.onlineCheckinAirlineInformationModel&&null!=d.onlineCheckinAirlineInformationModel.airline)?true:false);
this.frequentTravelProgramList=ko.observableArray(e.frequentTravelerPreferenceList===null?[]:e.frequentTravelerPreferenceList);
this.frequentTravelProgramSelected=ko.observable(d.onlineCheckinAirlineInformationModel===null?null:d.onlineCheckinAirlineInformationModel.frequentTravelerProgram);
this.frequentTravelerNumber=ko.observable(d.onlineCheckinAirlineInformationModel===null?null:d.onlineCheckinAirlineInformationModel.frequentTravelerNumber);
this.isMultiTerminal=ko.observable(d.locationWithMultipleTerminals);
this.multiTerminalSelection=ko.observable();
this.terminalSelectionText=ko.observable();
this.skipValidation=ko.observable("");
this.isTerminalSelected=ko.observable();
this.setTerminal=function(g,h){h.preventDefault();
if(h.currentTarget.id==="modify-airline"){f.skipValidation("");
$(".arrivalFlightNumberInfo,.arrivalAirlineInfo,[name='airline']").show();
$("[name='airline'], [name='flightNumber']").attr("value","");
f.isTerminalSelected(false)
}else{f.terminalSelectionText('"'+h.currentTarget.innerText+'"');
f.skipValidation("skipValidation");
$(".arrivalFlightNumberInfo,.arrivalAirlineInfo,[name='airline']").hide();
$("[name='airline'], [name='flightNumber']").attr("value","");
f.isTerminalSelected(true);
if(h.currentTarget.id==="noFlight"){$("[name='airline']").attr("value","WU")
}else{if(h.currentTarget.id==="notInList"){$("[name='airline']").attr("value","XX")
}}}};
for(var c=0;
c<this.frequentTravelProgramList().length;
c++){if(this.frequentTravelProgramList()[c].primary){if(this.frequentTravelProgramSelected()===null||this.frequentTravelProgramSelected()===""){this.frequentTravelProgramSelected(this.frequentTravelProgramList()[c].code)
}if(this.frequentTravelerNumber()===null||this.frequentTravelerNumber()===""){this.frequentTravelerNumber(this.frequentTravelProgramList()[c].accountNumber)
}this.showAirlineFrequentTravelSection(true)
}}if(this.frequentTravelerNumber()===null){this.frequentTravelerNumber("")
}if(this.frequentTravelProgramSelected()===null){this.frequentTravelProgramSelected("")
}this.frequentTravelProgramSelected.subscribe(function(h){if(typeof h==="undefined"||h===null||h===""){f.frequentTravelerNumber("")
}for(var g=0;
g<f.frequentTravelProgramList().length;
g++){if(f.frequentTravelProgramList()[g].code===h){f.frequentTravelerNumber(f.frequentTravelProgramList()[g].accountNumber)
}}});
this.isDisplayAditionalInformation=null===e.displayFlags?null:ko.observable(e.displayFlags.isDisplayAditionalInformation);
this.airlines=ko.observableArray();
$.each(e.airlines,function(g,h){f.airlines.push({id:h.code,name:h.name})
})
};
ko.bindingHandlers.airlineErrorHandler={init:function(c,d,e,b,a){b.messages.subscribe(function(f){$.each(f,function(g,h){if(h.fieldName==="airline"&&h.messageScope==="FIELD"&&h.messageSeverity==="error"){$(c).addClass("open")
}})
})
}};
var additionalDriverInformation=function(a){var d=this;
this.isEditMode=ko.observable(a.isEditMode);
this.additionalDriverModel=null==a.additionalDriverModel?null:ko.observable(a.additionalDriverModel);
var c=typeof a.renterInfo==="undefined"?false:a.renterInfo;
this.individualId=ko.observable(c.individualId);
this.additionalDriverCharge=ko.observable(a.additionalDriverCharge);
this.currencySymbol=ko.observable(a.currencySymbol);
this.adLicenseNumber=ko.observable((typeof c.maskedLastFourDigits==="undefined"||c.maskedLastFourDigits==null)?"":c.maskedLastFourDigits);
this.doNotRent=ko.observable(a.doNotRent);
if(this.doNotRent()){var b=$("#modal div.content");
$.ajax({url:doNotRentForwardUrl,dataType:"html",contentType:"application/x-www-form-urlencoded; charset=UTF-8",error:function(){},success:function(e){b.empty();
b.append(e);
$(document).trigger("ajaxGetComplete")
},error:function(){top.append('<p role="alert" class="error">'+d.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
}this.adLicenseExpirationDate=ko.observable(typeof c.driverLicense==="undefined"?"":c.driverLicense.compoundExpirationDate);
if(typeof c.driverLicense!=="undefined"&&typeof c.driverLicense.compoundExpirationDate!=="undefined"&&c.driverLicense.compoundExpirationDate!=null){adLicenseExpirationDate=c.driverLicense.compoundExpirationDate
}this.adLicenseIssuingDate=ko.observable(typeof c.driverLicense==="undefined"?"":c.driverLicense.compoundIssueDate);
if(typeof c.driverLicense!=="undefined"&&typeof c.driverLicense.compoundIssueDate!=="undefined"&&c.driverLicense.compoundIssueDate!=null){this.adLicenseIssuingDate=c.driverLicense.compoundIssueDate
}this.adLicenseCountry=ko.observable((typeof c.driverLicense==="undefined"||c.driverLicense==null||c.driverLicense.countryCode==null)?a.countryOfResidence:c.driverLicense.countryCode);
this.licenseState=ko.observable(typeof c.driverLicense==="undefined"?"":c.driverLicense.stateProvinceCode);
this.adAddressLine1=ko.observable(((typeof c.homeMailtoAddress==="undefined")||(typeof c.homeMailtoAddress.addressLines[0]==="undefined"))?"":c.homeMailtoAddress.addressLines[0]);
this.adAddressLine2=ko.observable(((typeof c.homeMailtoAddress==="undefined")||(typeof c.homeMailtoAddress.addressLines[1]==="undefined"))?"":c.homeMailtoAddress.addressLines[1]);
this.adAddressCity=ko.observable(typeof c.homeMailtoAddress==="undefined"?"":c.homeMailtoAddress.city);
this.adAddressZipCode=ko.observable(typeof c.homeMailtoAddress==="undefined"?"":c.homeMailtoAddress.postalCode);
this.adContactNumber=ko.observable(typeof c.homeMailtoAddress==="undefined"?"":c.phoneMap[1]);
this.adAddressCountry=ko.observable((typeof c.homeMailtoAddress==="undefined"||c.homeMailtoAddress==null||c.homeMailtoAddress.countryCode==null)?a.countryOfResidence:c.homeMailtoAddress.countryCode);
this.adAddressState=ko.observable(typeof c.homeMailtoAddress==="undefined"?"":c.homeMailtoAddress.stateProvinceCode);
this.adDateOfBirth=ko.observable(typeof c.compounDateOfBirth==="undefined"?"":c.compoundDateOfBirth);
this.adFirstName=ko.observable(typeof c.firstName==="undefined"?"":c.firstName);
this.adLastName=ko.observable(typeof c.lastName==="undefined"?"":c.lastName);
this.addressSameAsPrimaryDriver=ko.observable(typeof c.addressSameAsPrimaryDriver==="undefined"?"":c.addressSameAsPrimaryDriver);
if(typeof c.compoundDateOfBirth!=="undefined"&&c.compoundDateOfBirth!=null){adDateOfBirth=c.compoundDateOfBirth
}this.additionalDriverCountryArray=[{countryCode:"",name:""}];
this.selectedAdditionalDriverAddressCountry=ko.observable();
this.selectedAdditionalDriverAddressState=ko.observable();
this.selectedAdditionalDriverLicenseCountry=ko.observable();
this.selectedAdditionalDriverLicenseState=ko.observable();
this.additionalDriverAddressStateArray=ko.observable([{name:"",stateProvinceCode:""}]);
this.additionalDriverLicenseStateArray=ko.observable([{name:"",stateProvinceCode:""}]);
this.showAdditionalDriverPostalCode=ko.observable(false);
this.showAdditionalDriverAddressState=ko.observable(false);
this.showAdditionalDriverLicenseState=ko.observable(false);
this.enableLicenseExpirationDate=ko.observable(false);
this.enableLicenseIssueDate=ko.observable(false);
this.nonRequiredLabel=ko.observable((this.enableLicenseExpirationDate()==true&&this.enableLicenseIssueDate()==true)?true:false);
this.adChangeAdditionalDriverLicenseStateListAndDriverLicenseIssueAndExpirationDate=function(){changeAdditionalDriverLicenseStateList();
adDisplayLicenseIssueAndExpirationDate()
};
this.changeAdditionalDriverAddressStateList=function(g,e,h){var f=prepareForSuffix(d.driverInformationStateUrl)+"/country="+d.selectedAdditionalDriverAddressCountry();
$.ajax({url:f,contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(j){var i=j.statesProvinces;
if(j.showPostalCode){d.showAdditionalDriverPostalCode(true)
}else{d.showAdditionalDriverPostalCode(false);
d.adAddressZipCode("")
}if(typeof i!=="undefined"&&i.length>2){d.showAdditionalDriverAddressState(true);
d.additionalDriverAddressStateArray(i)
}else{d.showAdditionalDriverAddressState(false);
d.additionalDriverAddressStateArray(i)
}if(h){d.selectedAdditionalDriverAddressState(h)
}else{d.selectedAdditionalDriverAddressState("")
}$(document).trigger("ajaxGetComplete")
},error:function(){top.append('<p role="alert" class="error">'+d.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
this.changeAdditionalDriverLicenseStateList=function(g,e,h){var f=prepareForSuffix(d.driverInformationStateUrl)+"/country="+d.selectedAdditionalDriverLicenseCountry();
$.ajax({url:f,contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(j){var i=j.statesProvinces;
if(typeof i!=="undefined"&&i.length>2){d.showAdditionalDriverLicenseState(true);
d.additionalDriverLicenseStateArray(i)
}else{d.showAdditionalDriverLicenseState(false);
d.additionalDriverLicenseStateArray(i)
}if(h){d.selectedAdditionalDriverLicenseState(h)
}else{d.selectedAdditionalDriverLicenseState("")
}$(document).trigger("ajaxGetComplete")
},error:function(){top.append('<p role="alert" class="error">'+d.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
this.adDisplayLicenseIssueAndExpirationDate=function(){var e=prepareForSuffix(d.driverInformationLicenseIssueAndExpirationDateUrl)+"?countryCode="+d.selectedAdditionalDriverLicenseCountry();
$.ajax({url:e,dataType:"json",contentType:"application/x-www-form-urlencoded; charset=UTF-8",success:function(f){d.enableLicenseExpirationDate(f.enableLicenseExpirationDate);
d.enableLicenseIssueDate(f.enableLicenseIssueDate);
d.nonRequiredLabel((d.enableLicenseExpirationDate()==true&&d.enableLicenseIssueDate()==true)?true:false);
$(document).trigger("ajaxGetComplete")
},error:function(){top.append('<p role="alert" class="error">'+d.labels.generic_global_error+"</p>");
top.css("position","relative")
}})
};
if(typeof driverInformation!==undefined){d.additionalDriverCountryArray=driverInformation.driverCountryArray;
d.selectedAdditionalDriverAddressCountry(d.adAddressCountry());
if(d.adAddressCountry()){d.changeAdditionalDriverAddressStateList(null,null,d.adAddressState())
}d.selectedAdditionalDriverLicenseCountry(d.adLicenseCountry());
if(d.adLicenseCountry()){d.changeAdditionalDriverLicenseStateList(null,null,d.licenseState());
adDisplayLicenseIssueAndExpirationDate()
}d.virginDefaultCountryCode=ko.observable(a.virginDefaultCountryCode);
if(virginDefaultCountryCode()!==undefined){d.selectedAdditionalDriverLicenseCountry(virginDefaultCountryCode());
d.selectedAdditionalDriverAddressCountry(virginDefaultCountryCode());
adDisplayLicenseIssueAndExpirationDate()
}}};
var contractTermsConditions=function(a){this.couponDesc=typeof a.coupon==="undefined"?"":a.coupon.description;
if(this.couponDesc!=""){this.dealCouponTermsAndConditions=ko.observable(a.dealCouponDetail.customerTranslation.termsAndConditions);
this.dealCouponTermsAndConditionsExists=ko.computed(function(){if(this.dealCouponTermsAndConditions()!=""&&this.dealCouponTermsAndConditions()!=null){return true
}else{return false
}},this)
}this.customerTermsAndConditions=ko.computed(function(){if(typeof a.customer!="undefined"){if(typeof a.customer.dealCustomerDetail!="undefined"){return a.customer.dealCustomerDetail.customerTranslation.termsAndConditions
}else{return a.customer.partnerCustomerDetail.customerTranslation.termsAndConditions
}}return""
});
this.customerTermsAndConditionsExists=ko.computed(function(){if(customerTermsAndConditions()!=""&&customerTermsAndConditions()!=null){return true
}else{return false
}})
};
if(typeof(alamo)==="undefined"){alamo={}
}if(typeof(alamo.oci)==="undefined"){alamo.oci={}
}alamo.oci.addonContainer=function(c){var b=this;
if(typeof c.bypassDetailContainerModel!=="undefined"){b.agreedToTerms=ko.observable(c.bypassDetailContainerModel.agreedToTerms);
b.termsVersion=ko.observable(c.bypassDetailContainerModel.termsVersion);
b.justAddons=ko.observable(c.bypassDetailContainerModel.justAddons);
b.termsVersion=ko.observable(c.bypassDetailContainerModel.termsVersion);
b.bypassAvailable=ko.observable(c.bypassDetailContainerModel.bypassAvailable);
b.mandatoryBypass=ko.observable(c.bypassDetailContainerModel.mandatoryBypass);
b.coveragesAvailable=ko.observable(c.bypassDetailContainerModel.coveragesAvailable);
b.alreadyBypassed=ko.observable(c.bypassDetailContainerModel.alreadyBypassed);
b.isPrePayRes=ko.observable(c.bypassDetailContainerModel.prePayRes);
var a=c.bypassDetailContainerModel.purchasingBypass?c.bypassDetailContainerModel.purchasingBypass:false;
if(!window.purchasingBypass){window.purchasingBypass=ko.observable(a)
}else{window.purchasingBypass(a)
}}};
function createNewFormElement(b,a,c){var d=document.createElement("input");
d.name=a;
if(null==c){c=""
}d.value=c;
b.appendChild(d);
return d
}function callPanGui(d){var a=document.createElement("form");
a.method="POST";
a.action=d.paymentApplicationUrl;
a.name=d.paymentFormName;
var f=d.formElements;
for(var c in f){var b="panHandlerScreenDto."+c;
var e=f[c];
createNewFormElement(a,b,e)
}createNewFormElement(a,"clientSesId",d.clientSessionId);
document.body.appendChild(a);
a.submit()
}var pangui=function(a){if(a.addPaymentInformation){callPanGui(a.addPaymentInformation)
}};
var policies=function(b){this.policies=ko.observable(b.policyList);
var a=$("#viewPolicyDetailModalPath").val();
this.isPoliciesAvailable=(b.policyList!=="undefined"&&b.policyList.length>0)?true:false;
this.buildUrl=function(c){return a+".modal.html?policyCode="+c
}.bind(this)
};
var policyDetail=function(a){this.policyDetail=ko.observable(a.policy)
};
var frequentTravellerInfo=function(c){var e=this;
var d=c.reviewAndSubmit;
this.frequentTravelProgNumber=(typeof c.frequentTravelNumber==="undefined")?"":c.frequentTravelNumber;
this.frequentTravelProgName=(typeof c.frequentTravelProgramName==="undefined")?"":c.frequentTravelProgramName;
this.onlineCheckinAirlineInformationModel=null===c.onlineCheckinAirlineInformationModel?null:ko.observable(c.onlineCheckinAirlineInformationModel);
var a=d.displayFlags.isSelectedFrequentTravelerProgram;
this.isSelectedFrequentTravelerProgram=ko.observable(d.displayFlags.isSelectedFrequentTravelerProgram);
this.isNotSelectedFrequentTravelerProgram=a===true?ko.observable(false):ko.observable(true);
this.isDisplayFrequentTravelerProgram=ko.observable(d.displayFlags.isDisplayFrequentTravelerProgram);
this.showFrequentTravelSection=ko.observable((null!=c.onlineCheckinAirlineInformationModel&&null!=c.onlineCheckinAirlineInformationModel.frequentTravelerNumber)?true:false);
this.frequentTravelProgramList=ko.observableArray(d.frequentTravelerPreferenceList===null?[]:d.frequentTravelerPreferenceList);
this.frequentTravelProgramSelected=ko.observable(c.onlineCheckinAirlineInformationModel===null?null:c.onlineCheckinAirlineInformationModel.frequentTravelerProgram);
this.frequentTravelerNumber=ko.observable(c.onlineCheckinAirlineInformationModel===null?null:c.onlineCheckinAirlineInformationModel.frequentTravelerNumber);
this.isVirginAtlantic=ko.observable(c.isVirginAtlantic);
for(var b=0;
b<this.frequentTravelProgramList().length;
b++){if(this.frequentTravelProgramList()[b].primary){if(this.frequentTravelProgramSelected()===null||this.frequentTravelProgramSelected()===""){this.frequentTravelProgramSelected(this.frequentTravelProgramList()[b].code)
}if(this.frequentTravelerNumber()===null||this.frequentTravelerNumber()===""){this.frequentTravelerNumber(this.frequentTravelProgramList()[b].accountNumber)
}this.showFrequentTravelSection(true)
}}if(this.frequentTravelerNumber()===null){this.frequentTravelerNumber("")
}if(this.frequentTravelProgramSelected()===null){this.frequentTravelProgramSelected("")
}this.frequentTravelProgramSelected.subscribe(function(g){if(typeof g==="undefined"||g===null||g===""){e.frequentTravelerNumber("")
}for(var f=0;
f<e.frequentTravelProgramList().length;
f++){if(e.frequentTravelProgramList()[f].code===g){e.frequentTravelerNumber(e.frequentTravelProgramList()[f].accountNumber)
}}})
};
var bypassContainer=function(a){this.isPrePayRes=ko.observable(a.isPrepaidRes);
this.isBypassAvailable=ko.observable(a.isBypassAvailable);
this.reservationNumber=ko.observable(a.reservationNumber)
};